from django.apps import apps
from django.conf import settings
from django.db import models
from django.utils import timezone

from main.settings import auth_settings


class Grant(models.Model):
    """
    Grant instance represents a token with a short lifetime that can be
    swapped for an access token, as described in :rfc:`4.1.2`
    * :attr:`user` The Django user who requested the grant
    * :attr:`code` The authorization code generated by the authorization server
    * :attr:`application` Application instance this grant was asked for
    * :attr:`expires` Expire time in seconds, defaults to
                      :data:`settings.AUTHORIZATION_CODE_EXPIRE_SECONDS`
    * :attr:`redirect_uri` Self explained
    * :attr:`scope` Required scopes, optional
    """
    CODE_CHALLENGE_PLAIN = "plain"
    CODE_CHALLENGE_S256 = "S256"
    CODE_CHALLENGE_METHODS = ((CODE_CHALLENGE_PLAIN, "plain"), (CODE_CHALLENGE_S256, "S256"))

    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="grants"
    )
    application = models.ForeignKey(auth_settings.APPLICATION_MODEL, on_delete=models.CASCADE)
    scope = models.TextField(null=True, blank=True)
    redirect_uris = models.TextField(null=True, blank=True)
    code = models.CharField(max_length=100, unique=True)
    expires_at = models.DateTimeField()

    challenge = models.CharField(max_length=128)
    challenge_method = models.CharField(max_length=6, choices=CODE_CHALLENGE_METHODS)

    def __str__(self):
        return self.code

    def is_valid(self, scopes=None):
        return not self.is_expired() and self.allow_scopes(scopes)

    def allow_scopes(self, scopes):
        """
        Check if the token allows the provided scopes
        :param scopes: An iterable containing the scopes to check
        """
        if not scopes:
            return True

        provided_scopes = set(self.scope.split())
        resource_scopes = set(scopes)

        return resource_scopes.issubset(provided_scopes)

    def is_expired(self):
        """
        Check if code is expired with timezone awareness
        """
        if not self.expires_at:
            return True
        return timezone.now() >= self.expires_at

    def revoke(self):
        return self.delete()

    def redirect_uri_allowed(self):
        """
        ToDo: define this method
        """
        raise NotImplementedError('Not implemented')


def get_grant_model():
    """Return the AccessToken model that is active in this project."""
    return apps.get_model(auth_settings.GRANT_MODEL)
