import json

from django.http import JsonResponse
from rest_framework import status


def error_response(field=None, error=None, resp_status=None):
    """
    Function to generalize the error response format.

    If only a single error message is to be displayed, we can call this function in such way:
        error_response(error="error message")
    If we want to display both key and error for a response then call this function in such way:
        error_response(field="field", error="this field is required")
    If we want to display the errors generated by serializer, then call this function in such way:
        error_response(error=serializer.errors)
    We can also pass other status codes as:
        error_response(error="Error occured", resp_status=status.HTTP_404_NOT_FOUND)
    :param field: name of field that error relates to
    :param error: error text or dictionary
    :param resp_status: status code
    :return: JsonResponse
    """
    if field and error:
        return JsonResponse({field: error}, status=resp_status if resp_status else status.HTTP_400_BAD_REQUEST)
    if error:
        if isinstance(error, dict):
            return JsonResponse(
                {key: value[0] for key, value in error.items()},
                status=resp_status if resp_status else status.HTTP_400_BAD_REQUEST)
        return JsonResponse({"error": error}, status=resp_status if resp_status else status.HTTP_400_BAD_REQUEST)


def success_response(message, resp_status=None):
    """
        Function to generalize success response format.
    :param message: text message
    :param resp_status: status code
    :return: JsonResponse
    """
    return JsonResponse({"message": message}, status=resp_status if resp_status else status.HTTP_200_OK)


def body_response(body, resp_status):
    """
        Function to generalize body response format.
    :param body: dictionary object
    :param resp_status: status code
    :return: JsonResponse
    """
    return JsonResponse(body, status=resp_status)
